// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Entry {
  id        String    @id
  title     String
  hash      String    @unique
  type      EntryType
  thumbnail String

  watched Boolean

  parent   Entry?  @relation(fields: [parentId], references: [id], name: "pc")
  parentId String?
  children Entry[] @relation(name: "pc")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  providers Availability[]
  likes     Likes[]
}

model Availability {
  id       Int      @id @default(autoincrement())
  url      String
  provider Provider @relation(fields: [providerId], references: [id])

  Entry      Entry?  @relation(fields: [entryId], references: [id])
  entryId    String?
  providerId String
}

model Likes {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id])
  entry   Entry     @relation(fields: [entryId], references: [id])
  level   LikeLevel
  userId  String
  entryId String
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  registeredSince DateTime @default(now())
  lastSeen        DateTime @updatedAt

  entries Entry[]
  likes   Likes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Provider {
  id                    String         @id @default(cuid())
  name                  String
  url                   String
  requires_subscription Boolean
  entries               Availability[]
}

enum EntryType {
  Video
  Show
  Season
  Episode
  Movie
}

enum LikeLevel {
  NOT_INTERESTED
  INTETESTED
  INTERESTED_WATCHED
  INTERESTED_REQUIRED
}

generator zod {
  provider = "zod-prisma-types"
}
